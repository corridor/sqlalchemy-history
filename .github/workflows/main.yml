name: "Test"

on:
  push:
    branches:
      - master
    paths-ignore:
      - "docs/**"
  pull_request:
    paths-ignore:
      - "docs/**"

jobs:
  lint:
    name: lint-python${{ matrix.python-version }}
    strategy:
      matrix:
        python-version:
          - "3.7"
          - "3.10"
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v1
      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Black Validation
        uses: psf/black@stable
        with:
          version: "23.3.0" # Last version which can be used in py3.7
      - name: Check Flake8 Formatting
        uses: py-actions/flake8@v2

  test-sqlite:
    name: test-python${{ matrix.python-version }}-sqlite
    strategy:
      matrix:
        python-version:
          - "3.7"
          - "3.10"
    runs-on: ubuntu-20.04 # refer: https://github.com/actions/setup-python/issues/541
    steps:
      - uses: actions/checkout@v1
      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Project
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade poetry 
          poetry install
      - name: Run tests
        run: |
          source "$( poetry env list --full-path | grep Activated | cut -d' ' -f1 )/bin/activate"
          pytest --cov
        env:
          DB: sqlite
          COVERAGE_FILE: .coverage.sqlite.${{ matrix.python-version }}
      - uses: actions/upload-artifact@v3
        with:
          name: sqlite-coverage-files
          path: .coverage.*

  test-mysql:
    name: test-python${{ matrix.python-version }}-mysql
    strategy:
      matrix:
        python-version:
          - "3.7"
          - "3.10"
    services:
      mysql:
        image: mysql
        ports:
          - 3306:3306
        env:
          MYSQL_DATABASE: sqlalchemy_history_test
          MYSQL_ALLOW_EMPTY_PASSWORD: yes
        options: >-
          --health-cmd "mysqladmin ping"
          --health-interval 5s
          --health-timeout 2s
          --health-retries 3
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v1
      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Project
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade poetry 
          poetry install
      - name: Run tests
        run: |
          source "$( poetry env list --full-path | grep Activated | cut -d' ' -f1 )/bin/activate"
          pytest --cov
        env:
          DB: mysql
          COVERAGE_FILE: .coverage.mysql.${{ matrix.python-version }}
      - uses: actions/upload-artifact@v3
        with:
          name: mysql-coverage-files
          path: .coverage.*

  test-postgres:
    name: test-python${{ matrix.python-version }}-postgres
    strategy:
      matrix:
        python-version:
          - "3.7"
          - "3.10"
    services:
      postgres:
        image: postgres
        ports:
          - 5432:5432
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: sqlalchemy_history_test
        options: >-
          --health-cmd pg_isready
          --health-interval 5s
          --health-timeout 2s
          --health-retries 3
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v1
      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Project
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade poetry 
          poetry install
      - name: Run tests
        run: |
          source "$( poetry env list --full-path | grep Activated | cut -d' ' -f1 )/bin/activate"
          pytest --cov
        env:
          DB: postgres
          COVERAGE_FILE: .coverage.postgresql.${{ matrix.python-version }}
      - uses: actions/upload-artifact@v3
        with:
          name: postgres-coverage-files
          path: .coverage.*

  test-mssql:
    name: test-python${{ matrix.python-version }}-mssql
    strategy:
      matrix:
        python-version:
          - "3.7"
          - "3.10"
    services:
      mssql:
        image: mcr.microsoft.com/mssql/server:2017-latest # https://mcr.microsoft.com/en-us/product/mssql/server/about
        ports:
          - 1433:1433
        env:
          MSSQL_SA_PASSWORD: MSsql2022
          ACCEPT_EULA: N
        options: >-
          --health-cmd "/opt/mssql-tools/bin/sqlcmd -U $DB_USER -P $SA_PASSWORD -Q 'select 1' -b -o /dev/null"
          --health-interval 5s
          --health-timeout 2s
          --health-retries 3
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v1
      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Project
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade poetry 
          poetry install
      - name: Run tests
        run: |
          source "$( poetry env list --full-path | grep Activated | cut -d' ' -f1 )/bin/activate"
          pytest --cov
        env:
          DB: mssql
          COVERAGE_FILE: .coverage.mssql.${{ matrix.python-version }}
      - uses: actions/upload-artifact@v3
        with:
          name: mssql-coverage-files
          path: .coverage.*

  test-oracle:
    name: test-python${{ matrix.python-version }}-oracle
    strategy:
      matrix:
        python-version:
          - "3.7"
          - "3.10"
    services:
      oracle:
        image: gvenzl/oracle-xe:21
        ports:
          - 1521:1521
        env:
          ORACLE_PASSWORD: Oracle2022
        options: >-
          --health-cmd healthcheck.sh
          --health-interval 30s
          --health-timeout 15s
          --health-retries 5
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v1
      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Project
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade poetry 
          poetry install
      - name: install oracle dependencies
        run:
          | # https://cx-oracle.readthedocs.io/en/latest/user_guide/installation.html#installing-cx-oracle-on-linux
          mkdir -p /opt/oracle
          cd /opt/oracle
          wget https://download.oracle.com/otn_software/linux/instantclient/218000/instantclient-basic-linux.x64-21.8.0.0.0dbru.zip
          unzip /opt/oracle/instantclient-basic-linux.x64-21.8.0.0.0dbru.zip
          sudo apt-get install libaio1
      - name: Run tests
        run: |
          export LD_LIBRARY_PATH=/opt/oracle/instantclient_21_8/${LD_LIBRARY_PATH:+:$LD_LIBRARY_PATH}
          source "$( poetry env list --full-path | grep Activated | cut -d' ' -f1 )/bin/activate"
          pytest --cov
        env:
          DB: oracle
          COVERAGE_FILE: .coverage.oracle.${{ matrix.python-version }}
      - uses: actions/upload-artifact@v3
        with:
          name: oracle-coverage-files
          path: .coverage.*

  generate-coverage-report:
    runs-on: ubuntu-20.04
    # ref: https://github.com/actions/runner/issues/491#issuecomment-850884422
    if: |
      always() &&
      (needs.test-oracle.result == 'success' && needs.test-sqlite.result == 'success' && needs.test-mssql.result == 'success' && needs.test-mysql.result == 'success'  && needs.test-postgres.result == 'success')
    needs: [test-oracle, test-sqlite, test-mssql, test-mysql, test-postgres]
    steps:
      - uses: actions/checkout@v1
      - name: Download coverage files
        uses: actions/download-artifact@v3 # Downloads all artifact files
        with:
          path: /opt/coveragedata/
      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.7"
      - name: Install coverage and combine coverage to generate lcov
        run: |
          pip install coverage==7.2.7
          coverage combine /opt/coveragedata/oracle-coverage-files/ /opt/coveragedata/mssql-coverage-files/ /opt/coveragedata/postgres-coverage-files/ /opt/coveragedata/mysql-coverage-files/ /opt/coveragedata/sqlite-coverage-files/
          coverage lcov
      - name: Coveralls
        env:
          github-token: ${{ secrets.GITHUB_TOKEN }}
        uses: coverallsapp/github-action@master
        with:
          path-to-lcov: ./coverage.lcov
